// SPDX-License-Identifier: Apache-2.0
// Copyright 2023: Amazon Web Services, Inc
//
// This file contains a representation of an MIS instance in METIS 4.0 format.
// It is used to read instances from files.
//
// IMPORTANT: The METIS format useses 1-indexed NodeIds and this is reflected
// in the contents of the adjacency list `adj` after loading from file. If your
// algorithm requires 0-indexed NodeIds, you need to decrement each of them.
//
#pragma once

#include <cassert>
#include <fstream>
#include <string>
#include <vector>
using std::ifstream;
using std::string;
using std::vector;

// Helper function to read lines from a file
vector<string> get_lines(string filename) {
  vector<string> lines;
  ifstream input(filename);
  string line;
  while (getline(input, line)) {
    lines.push_back(line);
  }
  return lines;
}

// Helper function to split a string into numbers
vector<uint16_t> get_numbers(const string &line) {
  vector<uint16_t> numbers;
  string delim = " \t";
  size_t a = line.find_first_not_of(delim);
  size_t b = line.find_first_of(delim, a);
  while (a < b) {
    int number = stoi(line.substr(a, b - a));
    numbers.push_back(number);
    a = line.find_first_not_of(delim, b);
    b = line.find_first_of(delim, a);
  }
  return numbers;
}

// Representation of an MIS instance
class Instance {
 public:
  Instance() : L(0), N(0), seed(0) {}

  // Load instances from a metis4 txt file
  void load(string filename) {
    auto lines = get_lines(filename);
    uint16_t data_line = 0;
    for (size_t i = 0; i < lines.size(); i++) {
      const auto &line = lines[i];
      if (line.size() == 0) continue;  // ignore empty lines
      if (line[0] == '%') {
        // Check for L=? in comment lines. (It's not used explicitly in the
        // computation but, this is a safeguard against feeding files not
        // generated by us -- and thus potentially not ordered as this counter
        // assumes).
        if (line.substr(0, 5) == "%% L=") {
          L = stoi(line.substr(5));
        }
        if (line.substr(0, 8) == "%% seed=") {
          seed = stoi(line.substr(8));
        }
        continue;  // ignore comment lines.
      }
      auto entries = get_numbers(line);
      if (data_line == 0) {
        // first data line defines the graph size
        N = entries[0];
        if (entries.size() == 3) {
          assert(entries[2] == 0);
        }
        adj.resize(1);  // sentinel to make indices 1-indexed.
      } else {
        // store adjacency list
        adj.push_back(entries);
      }
      data_line++;
    }
  }

  // The number of lines/columns in the Union Jack lattice
  int L;
  // The number of nodes in the graph
  int N;
  // Adjacency list representation of the graph
  // NOTE: indices of the outer vector are 1-based (as they are in the metis
  // format). The first entry of the outer vector is therefore an empty list
  // (since 0 is not a NodeId in this representation) and
  vector<vector<uint16_t>> adj;
  int seed;
};
